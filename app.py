import streamlit as st
from PyPDF2 import PdfReader
import docx2txt

st.set_page_config(page_title="HR-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ GPT", layout="wide")

# ==================== üåó –¢–µ–º–∞ ====================
theme = st.selectbox("üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:", ["üåô –¢—ë–º–Ω–∞—è", "üåû –°–≤–µ—Ç–ª–∞—è"])
dark_mode = theme == "üåô –¢—ë–º–Ω–∞—è"

# –¶–≤–µ—Ç–∞
background_color = "#0e1117" if dark_mode else "#ffffff"
text_color = "#ffffff" if dark_mode else "#000000"
button_bg = "#e0e0e0"
button_text_color ="#000000"

# ==================== üíÑ –°—Ç–∏–ª–∏ ====================
if dark_mode:
    custom_css = f"""
        <style>
            html, body, .stApp {{
                background-color: {background_color} !important;
                color: {text_color} !important;
            }}

            h1, h2, h3, h4, h5, h6, p, span, label, div, section, .stMarkdown, .stText, .stRadio, .stSelectbox, .stFileUploader {{
                color: {text_color} !important;
            }}

            .stButton > button {{
                background-color: {button_bg} !important;
                color: {button_text_color} !important;
                border: 1px solid #ccc;
                border-radius: 0.5rem;
                padding: 0.4em 1em;
            }}

            .stTextInput > div > div > input,
            .stTextArea > div > textarea {{
                background-color: #262730 !important;
                color: #ffffff !important;
            }}

            div[role="listbox"] > div {{
                color: #ffffff !important;
                background-color: #262730 !important;
            }}
        </style>
    """
else:
    custom_css = f"""
    <style>
        html, body, .stApp {{
            background-color: {background_color} !important;
            color: {text_color} !important;
        }}

        h1, h2, h3, h4, h5, h6, p, span, label, div, section, .stMarkdown, .stText, .stRadio, .stSelectbox, .stFileUploader {{
            color: {text_color} !important;
        }}

        .stButton > button {{
            background-color: {button_bg} !important;
            color: {button_text_color} !important;
            border: 1px solid #ccc;
            border-radius: 0.5rem;
            padding: 0.4em 1em;
        }}

        input, textarea, .stTextInput input, .stTextArea textarea {{
            background-color: #ffffff !important;
            color: #000000 !important;
            border: 1px solid #cccccc !important;
            border-radius: 5px !important;
            box-shadow: none !important;
        }}

        div[data-baseweb="select"] > div,
        div[data-baseweb="select"] input {{
            background-color: #ffffff !important;
            color: #000000 !important;
        }}

        div[data-baseweb="select"] div[role="listbox"],
        div[data-baseweb="select"] div[role="option"] {{
            background-color: #ffffff !important;
            color: #000000 !important;
        }}

        div[data-baseweb="select"] div[role="option"]:hover,
        div[data-baseweb="select"] div[aria-selected="true"] {{
            background-color: #f0f0f0 !important;
            color: #000000 !important;
        }}

        .stRadio > div {{
            background-color: #ffffff !important;
            color: #000000 !important;
        }}

        /* üí° –î–ª—è –±–µ–ª–æ–≥–æ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ selectbox –≤ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–µ ‚Äî React Portal */
        div[role="presentation"] > div {{
            background-color: #ffffff !important;
            color: #000000 !important;
            border-radius: 0 0 6px 6px !important;
        }}

        div[role="presentation"] [role="option"] {{
            background-color: #ffffff !important;
            color: #000000 !important;
        }}

        div[role="presentation"] [role="option"]:hover,
        div[role="presentation"] [aria-selected="true"] {{
            background-color: #f0f0f0 !important;
            color: #000000 !important;
        }}
    </style>
    """



st.markdown(custom_css, unsafe_allow_html=True)

# ==================== üß† –ó–∞–≥–æ–ª–æ–≤–æ–∫ ====================
st.markdown(f"<h1 style='color:{text_color};'>üòÄ HR-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –±–∞–∑–µ GPT</h1>", unsafe_allow_html=True)
st.markdown(f"<p style='color:{text_color};'>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ —Ä—É—Ç–∏–Ω—É: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—é–º–µ, —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –≥–æ—Ç–æ–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∫ –∏–Ω—Ç–µ—Ä–≤—å—é.</p>", unsafe_allow_html=True)

# ==================== üîò –ú–µ–Ω—é ====================
page = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", ["üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ", "üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏", "üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤"], horizontal=True)

# ==================== üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ ====================
if page == "üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ":
    st.markdown(f"<h2 style='color:{text_color};'>üìà –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ–∑—é–º–µ –≤–∞–∫–∞–Ω—Å–∏–∏</h2>", unsafe_allow_html=True)

    col1, col2 = st.columns(2)
    with col1:
        st.subheader("üìÑ –í–∞–∫–∞–Ω—Å–∏—è")
        vacancy_text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –≤—Ä—É—á–Ω—É—é:", key="vacancy_text")
        vacancy_file = st.file_uploader("üìé –ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏ (PDF/DOCX):", type=["pdf", "docx"], key="vacancy_file")
    with col2:
        st.subheader("üßë‚Äçüíº –†–µ–∑—é–º–µ")
        resume_text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ –≤—Ä—É—á–Ω—É—é:", key="resume_text")
        resume_file = st.file_uploader("üìé –ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ (PDF/DOCX):", type=["pdf", "docx"], key="resume_file")

    if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", key="analyze_btn"):
        st.write("‚öôÔ∏è –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è...")

# ==================== üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ ====================
elif page == "üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏":
    st.markdown(f"<h2 style='color:{text_color};'>üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏</h2>", unsafe_allow_html=True)

    mode = st.radio("üéØ –†–µ–∂–∏–º:", ["–°–æ–∑–¥–∞—Ç—å —Å –Ω—É–ª—è", "–£–ª—É—á—à–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"], horizontal=True)
    style = st.selectbox("üé® –°—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:", ["–î–µ–ª–æ–≤–æ–π", "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π", "–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π"], key="style_select")

    if mode == "–°–æ–∑–¥–∞—Ç—å —Å –Ω—É–ª—è":
        title = st.text_input("üìå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:", key="job_title")
        duties = st.text_area("üìã –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:", key="duties")
        requirements = st.text_area("üéØ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:", key="requirements")
        benefits = st.text_area("üéÅ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:", key="benefits")

        if st.button("üßæ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏", key="generate_vacancy"):
            st.write("üìù –ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏...")

    else:
        existing_text = st.text_area("‚úèÔ∏è –í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:", key="improve_text")
        improve_file = st.file_uploader("üìé –ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (PDF/DOCX):", type=["pdf", "docx"], key="improve_file")

        if st.button("üîÅ –£–ª—É—á—à–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", key="improve_vacancy"):
            st.write("üß† –û–±—Ä–∞–±–æ—Ç–∫–∞... –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –∑–¥–µ—Å—å.")

# ==================== üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ ====================
elif page == "üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤":
    st.markdown(f"<h2 style='color:{text_color};'>üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é</h2>", unsafe_allow_html=True)

    question_text = st.text_area("üìù –í—Å—Ç–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:", key="question_input")
    question_file = st.file_uploader("üìé –ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (PDF/DOCX):", type=["pdf", "docx"], key="question_file")

    if st.button("üé§ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã", key="generate_questions"):
        st.write("ü§ñ GPT —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è...")

# ==================== ü§ñ PROMPT ENGINEERING ====================
import openai

openai.api_key = "your API"


# ========== –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ ChatGPT ==========
def get_chatgpt_response(messages, model="gpt-4"):
    try:
        response = openai.ChatCompletion.create(
            model=model,
            messages=messages,
            temperature=0.3
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

# ========== –ü—Ä–æ–º–ø—Ç 1: –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ–∑—é–º–µ ==========
def analyze_resume_prompt(vacancy_text, resume_text):
    return [
        {"role": "system", "content": (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞–π–º—É –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å—Ç—Ä–æ–≥–æ –∏ –ª–æ–≥–∏—á–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–¥–∏–¥–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –æ–ø—ã—Ç—É, –Ω–∞–≤—ã–∫–∞–º –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é. "
            "–¢—ã —Ñ–æ—Ä–º–∏—Ä—É–µ—à—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –∫—Ä–∞—Ç–∫–∏–π –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥."
        )},
        {"role": "user", "content": (
            f"–í–∞–∫–∞–Ω—Å–∏—è:\n{vacancy_text}\n\n"
            f"–†–µ–∑—é–º–µ:\n{resume_text}\n\n"
            "–û—Ü–µ–Ω–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ:\n"
            "1. –ö–ª—é—á–µ–≤—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º\n"
            "2. –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∞–º\n"
            "3. –ó–∞–∫–ª—é—á–µ–Ω–∏—é (–ü–æ–¥—Ö–æ–¥–∏—Ç / –ß–∞—Å—Ç–∏—á–Ω–æ / –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç)\n"
            "4. –ö—Ä–∞—Ç–∫–æ–º—É –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—é"
        )}
    ]

if page == "üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ" and st.session_state.get("analyze_btn"):
    if vacancy_text and resume_text:
        with st.spinner("ü§ñ GPT –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç..."):
            messages = analyze_resume_prompt(vacancy_text, resume_text)
            result = get_chatgpt_response(messages)
        st.markdown("### üßæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
        st.write(result)

# ========== –ü—Ä–æ–º–ø—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ ==========
def generate_vacancy_prompt(title, duties, requirements, benefits, style):
    return [
        {"role": "system", "content": (
            f"–¢—ã ‚Äî HR-–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Å—Ç–∏–ª–µ: {style}. "
            f"–¢—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –¥–µ–ª–∞–µ—à—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º."
        )},
        {"role": "user", "content": (
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n\n"
            f"–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:\n{duties}\n\n"
            f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n{requirements}\n\n"
            f"–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n{benefits}\n\n"
            "–°—Ñ–æ—Ä–º–∏—Ä—É–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏."
        )}
    ]

if page == "üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏" and st.session_state.get("generate_vacancy"):
    if title and duties and requirements:
        with st.spinner("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è..."):
            messages = generate_vacancy_prompt(title, duties, requirements, benefits, style)
            result = get_chatgpt_response(messages)
        st.markdown("### üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:")
        st.write(result)

# ========== –ü—Ä–æ–º–ø—Ç 3: –£–ª—É—á—à–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è ==========
def improve_vacancy_prompt(existing_text, style):
    return [
        {"role": "system", "content": (
            f"–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π HR-—Ä–µ–¥–∞–∫—Ç–æ—Ä. –£–ª—É—á—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Å—Ç–∏–ª–µ: {style}. "
            "–°–¥–µ–ª–∞–π –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, –≥—Ä–∞–º–æ—Ç–Ω—ã–º, –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º. –ù–µ —Ç–µ—Ä—è–π –∫–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è."
        )},
        {"role": "user", "content": f"{existing_text}"}
    ]

if page == "üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏" and st.session_state.get("improve_vacancy"):
    if existing_text:
        with st.spinner("üß† –£–ª—É—á—à–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ..."):
            messages = improve_vacancy_prompt(existing_text, style)
            result = get_chatgpt_response(messages)
        st.markdown("### ‚ú® –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        st.write(result)

# ========== –ü—Ä–æ–º–ø—Ç 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ ==========
def generate_questions_prompt(description_text):
    return [
        {"role": "system", "content": (
            "–¢—ã ‚Äî —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ä–µ–∫—Ä—É—Ç–µ—Ä. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –≤–∞–∫–∞–Ω—Å–∏–∏. "
            "–ì—Ä—É–ø–ø–∏—Ä—É–µ—à—å –∏—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: hard skills, soft skills, –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ, –º–æ—Ç–∏–≤–∞—Ü–∏—è."
        )},
        {"role": "user", "content": (
            f"{description_text}\n\n–°–æ—Å—Ç–∞–≤—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."
        )}
    ]

if page == "üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤" and st.session_state.get("generate_questions"):
    if question_text:
        with st.spinner("üé§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤..."):
            messages = generate_questions_prompt(question_text)
            result = get_chatgpt_response(messages)
        st.markdown("### üéØ –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é:")
        st.write(result)